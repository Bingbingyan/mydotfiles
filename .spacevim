function! Layers()
  Layer 'fzf'
  Layer 'unite'
  Layer 'better-defaults'
  Layer 'emoji'
  Layer 'goyo'

  Layer 'better-motion'
  Layer 'html'
  Layer 'python'
  "Layer 'java'
  Layer 'vue'
  Layer 'javascript'
  Layer 'java'
  Layer 'markdown'
  Layer 'graphviz'

  "Layer 'airline'
  "Layer 'lightline'

  " For chinese users
  Layer 'chinese'

  Layer 'text-align'
  Layer 'programming'
  " Layer 'auto-completion'

  " Layer 'ycmd'
  Layer 'syntax-checking'
  Layer 'git'
endfunction

function! UserInit()
  " 自动格式化，中文排版
  Plug 'hotoo/pangu.vim'
  " 预览查询结果
  Plug 'osyo-manga/vim-over'
  " 彩虹括号
  "Plug 'luochen1990/rainbow'
  " VIM Table Mode
  Plug 'dhruvasagar/vim-table-mode'
  Plug 'nvie/vim-flake8'
  Plug 'scrooloose/syntastic'
  Plug 'kshenoy/vim-signature'
  Plug 'hynek/vim-python-pep8-indent'

  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

  " 从 Insert Mode 切换到 Normal Mode 时 自动将输入法切换为英文
  Plug 'CodeFalling/fcitx-vim-osx'

  " 可视化剪贴板
  Plug 'vim-scripts/YankRing.vim'
  " 文字对齐
  Plug 'godlygeek/tabular'

  Plug 'ervandew/supertab'
  " Plug 'Valloric/YouCompleteMe'
  Plug 'vim-scripts/UltiSnips'
  "Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  " Plug 'sickill/vim-monokai'
  " Plug 'jzelinskie/monokai-soda.vim'

  "Plug 'Shougo/deoplete.nvim'
  "Plug 'zchee/deoplete-jedi'
  " 自动完成
  Plug 'roxma/nvim-completion-manager'
  "Plug 'roxma/python-support.nvim'
  if !has('nvim')
    Plug 'roxma/vim-hug-neovim-rpc'
  endif

  " Tagbar for Markdown
  Plug 'lvht/tagbar-markdown'
  Plug 'JamshedVesuna/vim-markdown-preview'
  " VIM 中文文档
  Plug 'vimcn/vimcdoc'
  " 自动括号
  Plug 'Raimondi/delimitMate'
  Plug 'alvan/vim-closetag'

  Plug 'elzr/vim-json'

  " Vim Org Mode
  Plug 'jceb/vim-orgmode'
  " Colorschema
  Plug 'w0ng/vim-hybrid'
  Plug 'morhetz/gruvbox'
  " 自动完成
  "Plug 'davidhalter/jedi-vim'
  "Plug 'davidhalter/jedi'
  Plug 'neovim/python-client'
  " 快速注释
  Plug 'scrooloose/nerdcommenter'
  " 缩进指示线
  Plug 'Yggdroot/indentLine'
  " f 搜索增强
  " Plug 'justinmk/vim-sneak'
  " AngularJS support
  Plug 'burnettk/vim-angular'

  " 给选中的文本添加引号，或者修改
  Plug 'tpope/vim-surround'

  Plug 'trusktr/seti.vim'
  " FocusMode
  "Plug 'merlinrebrovic/focus.vim'
  "Plug 'ayu-theme/ayu-vim'
  "Plug 'rizzatti/dash.vim'

  "Plug 'KangOl/vim-pudb'
  Plug 'rafi/awesome-vim-colorschemes'

  "OrgMode Date extension
  Plug 'tpope/vim-speeddating'

  "RestClient
  Plug 'aquach/vim-http-client'

endfunction

function! UserConfig()
  let g:ale_emit_conflict_warnings = 0
  " :bd 删除当前 buffer
  " :1,5bw Wipe 1~5 buffer
  " :xd 删除末尾空格
  set encoding=utf-8
  set fileencoding=utf-8
  set autoread
  set nornu

  " 将所有数字都当做10进账进行处理
  set nrformats=
  " :YRShow 显示剪贴板的内容
  " :vs 纵向分割窗口
  " :split 横向分割窗口
  " 设置帮助语言为中文，需要下载中文的 help 文件
  set helplang=cn
  "colorscheme onedark
  "colorscheme default
  "colorscheme PaperColor
  "let g:solarized_termcolors=256
  set t_Co=256
  set termguicolors
  set background=dark

  " =================
  "set termguicolors     " enable true colors support
  "let ayucolor="light"  " for light version of theme
  "let ayucolor="mirage" " for mirage version of theme
  "let ayucolor="dark"   " for dark version of theme
  "colorscheme ayu
  " =================

  " Ctag Location
  "let g:airline_powerline_fonts=1
  let Tlist_Ctags_Cmd="/usr/local/Cellar/ctags/5.8_1/bin/ctags"
  " 设置允许使用鼠标
  set mouse=a
  " 设置80宽度颜色
  autocmd FileType python set colorcolumn=80
  "set colorcolumn=80
  "set columns=80
  " 设置背景色
  hi ColorColumn ctermbg=Black guibg=Black
  " 背景色透明
  if has('gui_running')
    set background=dark
  else
    hi Normal ctermbg=NONE  guibg=NONE
  endif
  "选取时将选区的内容字体置为绿色
  "hi Visual ctermfg=green guifg=green ctermbg=black guibg=black
  hi Visual ctermbg=black guibg=black
  " 高亮行，列
  set cursorline
  "设置当前行的样式
  highlight CursorLine   cterm=underline ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
  " highlight CursorColumn cterm=underline ctermbg=NONE ctermfg=green guibg=NONE guifg=NONE
  highlight LineNr ctermfg=grey guifg=grey
  "highlight IncSearch ctermfg=green guifg=green ctermbg=red guibg=red
  "highlight Search ctermfg=green guifg=green ctermbg=red guibg=red


  "if has('gui_running')
    "set guifont=Hannotate\ SC:h12
  "else
    "colorscheme seti
  "endif
  "缩进指示线"
  let g:indentLine_char='⎸'
  let g:indentLine_enabled = 1
  " 显示不可见字符
  set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
  set list
  " 在上下移动光标时，光标的上方或下方至少会保留显示的行数
  set scrolloff=3

  set expandtab
  set tabstop=4
  set shiftwidth=4
  "set textwidth=80
  "set wrap
  set linebreak
  set autoread
  " Enable folding
  set foldmethod=syntax
  "set foldlevelstart=0
  " 代码折叠的层级
  set foldnestmax=9
  "set foldlevel=0
  " 使用系统剪贴板
  "set clipboard=unnamed

  " 搜索时忽略大小写
  set ignorecase
  " NERDTree 打开/关闭
  map <F4> :NERDTreeToggle<CR>
  map <Leader><F4> :NERDTreeMirror<CR> :NERDTreeFind<CR>
  " NERDTree 显示行号
  let g:NERDTreeShowLineNumbers=1
  " NERDTree 显示相对行号
  "autocmd FileType nerdtree setlocal relativenumber
  " 设置 NerdTree 默认宽度
  let g:NERDTreeWinSize=40


  " 进入 Insert 模式自动保存
  autocmd InsertLeave *.* write

  " map    <Leader>n  :tabnext<CR>
  " Use Tab to switch buffer
  nnoremap <Leader><Tab> :Buffers<CR>
  nnoremap <Tab> :bn<CR>
  nnoremap <S-Tab> :bp<CR>

  " Make search results appear in the middle of the screen
  nnoremap n nzz
  nnoremap N Nzz
  nnoremap * *zz
  nnoremap # #zz
  nnoremap g* g*zz
  nnoremap g# g#zz

  " Format Python Script
  nmap <Leader>pf :0,$!yapf<CR>
  "let g:netrw_list_hide= '.*\.pyc$'
  "let g:NERDTreeIgnore = ['\.pyc$','\node_modules[[dir]]$']
  set wildignore+=**node_modules**,*.pyc,*.class
  let NERDTreeRespectWildIgnore=1
  "Ignore dist and build folders
  set wildignore+=*/dist*/**,*/target/**,*/build/**

  " Ignore libs
  set wildignore+=*/lib/**,*/_3rd_party_/**,*/node_modules/**,*/bower_components/**

  " Ignore images, pdfs, and font files
  set wildignore+=*.png,*.PNG,*.jpg,*.jpeg,*.JPG,*.JPEG,*.pdf
  set wildignore+=*.ttf,*.otf,*.woff,*.woff2,*.eot,*.jar

  " Ignore compiled files
  set wildignore+=*.class
  let g:basewildignore=&wildignore
  let g:NERDTreeIgnore=['dist*[[dir]]', '.jar[[file]]', 'node_modules[[dir]]', 'build*[[dir]]', 'target[[dir]]', 'node[[dir]]', 'etc[[dir]]']

  "set wildignore=*.pyc
  autocmd FileType python nnoremap <buffer> <LocalLeader><LocalLeader>r :update<Bar>execute 'AsyncRun! python '.shellescape(@%, 1)<CR>
  autocmd FileType python nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! python3 '.shellescape(@%, 1)<CR>
  autocmd FileType go nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! go run '.shellescape(@%, 1)<CR>
  autocmd FileType javascript nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! node '.shellescape(@%, 1)<CR>
  autocmd FileType sh nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! '.shellescape(@%, 1)<CR>

  " autocmd FileType c,cpp,python,go,javascript,rust
  " \   nnoremap <LocalLeader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
  "tabs
  nmap <leader>tn :tabnew<cr>
  nmap <leader>tc :tabclose<cr>

  " 直接删除，不放到剪切板
  " nnoremap d "_d
  " vnoremap d "_d
  " vnoremap D "_D
  " vnoremap p "_dhp

  " FocusMode
  "nmap <F7> <Plug>FocusModeToggle
  "let g:focusmode_width = 72

  " disable arrow keys in normal mode
  noremap <Up> <Nop>
  noremap <Down> <Nop>
  noremap <Left> <Nop>
  noremap <Right> <Nop>

  "高亮行尾空格
  " highlight ExtraWhitespace ctermbg=red guibg=red
  " highlight ExtraWhitespace ctermbg=Yellow guibg=Yellow
  highlight ExtraWhitespace ctermbg=White guibg=White
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()

  " 设置 cshtml 文件默认按照 HTML 进行高亮
  au BufRead,BufNewFile *.cshtml set filetype=html
  au BufRead,BufNewFile *.html set filetype=htmldjango
  au BufRead,BufNewFile *.js set filetype=javascript
  au BufRead,BufNewFile *.http set filetype=javascript

  " fzf ag search
  " Search UserHome Folder
  nnoremap <Leader>f? :Files ~<CR>
  " Search current CWD
  nnoremap <Leader>ff :Files<CR>

  nnoremap <Leader>ag :execute 'Ag ' . input('Ag/')<CR>
  " search current word with Ag
  nnoremap <Leader>ac :execute 'Ag' expand('<cword>')<CR>

  " 多光标操作
  let g:multi_cursor_use_default_mapping=0
  let g:multi_cursor_next_key='<C-m>'
  let g:multi_cursor_prev_key='<C-p>'
  let g:multi_cursor_skip_key='<C-x>'
  let g:multi_cursor_quit_key='<Esc>'

  " 格式 Json 字符串
  function FormatJSON(...)
    "let code="\"
          "\ var i = process.stdin, d = '';
          "\ i.resume();
          "\ i.setEncoding('utf8');
          "\ i.on('data', function(data) { d += data; });
          "\ i.on('end', function() {
          "\     console.log(JSON.stringify(JSON.parse(d), null,
          "\ " . (a:0 ? a:1 ? a:1 : 2 : 2) . "));
          "\ });\""
    "execute "%! node -e " . code
    let code = "\"import json, sys;
          \ print(json.dumps(json.load(sys.stdin),
          \               indent = 2,
          \               ensure_ascii = False,
          \               sort_keys = False))\""
    execute "%! python3 -c " code
    silent execute 'set ft=json'
  endfunction
  map <Leader>fj :call FormatJSON(v:count)<CR>

  function JQFilter(name)
    echom "Example: '.data.list|map({\"projectName\":.projectName,\"organizationCode\":.organizationCode})'"
    " 筛选条件不为空则执行筛选
    if strlen(a:name)>0
      " 保存临时文件
      silent execute 'w! ~/.jqtmp.json'
      " 清除控制台输出
      silent execute '!clear'
      " 清除筛选结果buffer
      if bufwinnr("__JQFilter__") > 0
        silent execute bufwinnr("__JQFilter__")'wincmd w'
      else
        silent execute 'vsplit __JQFilter__'
      endif
      silent execute '. normal ggVGd'
      " 复制筛选结果到剪贴板
      silent execute '!cat ~/.jqtmp.json|jq ' a:name '|pbcopy'
      " 打印出筛选结果
      "execute '!cat ~/.jqtmp.json|jq ' a:name
      "silent execute 'tabnew'
      silent execute 'set ft=json'
      silent execute 'r !pbpaste'
       "echom "Output copy to clipboard"
    endif
  endfunction
  " 调用 jq 筛选 Json 内容
  " !cat % | jq '.data[].areaname'
  nnoremap <Leader>jq :call JQFilter(input("jq/"))<CR>

  function TransTable()
    silent execute 's/\s\+/|/g'
    silent execute 's/^/|/g'
    silent execute 's/$/|/g'
    silent execute 'TableModeEnable'
  endfunction

  " TableMode Setting
  let g:table_mode_corner = '|'

  "保存当前布局
  nnoremap <Leader>ms :execute 'mksession! .last.vim'<CR>:execute 'wviminfo! .last.viminfo'<CR>
  "加载上次保存的布局
  nnoremap <Leader>ls :silent execute 'source .last.vim'<CR>:silent execute 'rviminfo .last.viminfo'<CR>


  " 翻译当前光标所在单词
  nmap <Leader>t :!echo --==<C-R><C-w>==-- ;ici <C-R><C-W><CR>

  let g:UltiSnipsExpandTrigger='<tab>'
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger='<c-p'

  let g:ycm_key_list_select_completion=[]
  let g:ycm_key_list_previous_completion=[]
  let g:SuperTabDefaultCompletionType = '<C-n>'

  "org mode
  let g:org_todo_keywords=['【TODO】', '【DOING】', '【DONE】' ]

  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)

  " Quickfix window to Right and 80 Width
  nmap <Leader>ll :cclose<CR>:vertical copen 80<CR>

  " for python completions
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'jedi')
  " language specific completions on markdown file
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'mistune')

  " utils, optional
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'psutil')
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'setproctitle')

  "map f <Plug>Sneak_s
  "map F <Plug>Sneak_S
  " s{char}{char} to move to {char}{char}
  "nmap F <Plug>(easymotion-overwin-f2)
  "nmap f <Plug>(easymotion-overwin-f)

  """ FocusMode
  function! ToggleFocusMode()
    if (&foldcolumn != 12)
      set laststatus=0
      set numberwidth=10
      set foldcolumn=12
      set noruler
      hi FoldColumn ctermbg=none
      hi LineNr ctermfg=0 ctermbg=none
      hi NonText ctermfg=0
    else
      set laststatus=2
      set numberwidth=4
      set foldcolumn=0
      set ruler
      execute 'colorscheme ' . g:colors_name
    endif
  endfunc
  nnoremap <F7> :call ToggleFocusMode()<cr>

  autocmd BufWritePre *.markdown,*.md,*.text,*.txt,*.wiki,*.cnx,*.org call PanGuSpacing()

  " quick comment ss
  nmap <Leader>;; :call NERDComment(0,"toggle") <CR>

  " RestClient setting
  let g:http_client_json_escape_utf=0
  "let g:http_client_preserve_responses=1
  "let g:http_client_json_ft = 'json'

  "colorscheme atom
  colorscheme one

  "let vim_markdown_preview_hotkey='<C-m>'
  let vim_markdown_preview_browser='Google Chrome'
  "let vim_markdown_preview_github=1
endfunction
