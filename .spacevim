" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
 "let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
 "let g:spacevim_localleader = ','

" Enable the existing layers in space-vim
let g:spacevim_layers = [
      \ 'fzf', 'unite', 'better-defaults',
      \ 'which-key',
      \ 'emoji',
      \ 'goyo',
      \ 'better-motion',
      \ 'html',
      \ 'python',
      \ 'vue',
      \ 'javascript',
      \ 'java',
      \ 'markdown',
      \ 'chinese',
      \ 'text-align',
      \ 'programming',
      \ 'syntax-checking',
      \ 'git'
      \ ]

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim_gui
"   Layer 'airline'
" endif

" Manage your own plugins, refer to vim-plug's instruction for more detials.
function! UserInit()
  " Add plugin via Plug command.
  Plug 'junegunn/seoul256.vim'
  Plug 'hotoo/pangu.vim'
  " JSON 格式，Filter
  Plug 'Bingbingyan/vim-jq'
  " 预览查询结果
  Plug 'osyo-manga/vim-over'
  " 彩虹括号
  "Plug 'luochen1990/rainbow'
  " VIM Table Mode
  Plug 'dhruvasagar/vim-table-mode'
  Plug 'nvie/vim-flake8'
  Plug 'scrooloose/syntastic'
  Plug 'kshenoy/vim-signature'
  Plug 'hynek/vim-python-pep8-indent'

  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

  " 从 Insert Mode 切换到 Normal Mode 时 自动将输入法切换为英文
  Plug 'CodeFalling/fcitx-vim-osx'

  " 可视化剪贴板
  Plug 'vim-scripts/YankRing.vim'
  " 文字对齐
  Plug 'godlygeek/tabular'

  Plug 'ervandew/supertab'
  " Plug 'Valloric/YouCompleteMe'
  Plug 'vim-scripts/UltiSnips'
  "Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  " Plug 'sickill/vim-monokai'
  " Plug 'jzelinskie/monokai-soda.vim'

  "Plug 'Shougo/deoplete.nvim'
  "Plug 'zchee/deoplete-jedi'
  " 自动完成
  Plug 'roxma/nvim-completion-manager'
  "Plug 'roxma/python-support.nvim'
  if !has('nvim')
    Plug 'roxma/vim-hug-neovim-rpc'
  endif

  " Tagbar for Markdown
  Plug 'majutsushi/tagbar'
  Plug 'lvht/tagbar-markdown'
  Plug 'JamshedVesuna/vim-markdown-preview'
  " VIM 中文文档
  Plug 'vimcn/vimcdoc'
  " 自动括号
  Plug 'Raimondi/delimitMate'
  Plug 'alvan/vim-closetag'

  Plug 'elzr/vim-json'

  " Vim Org Mode
  Plug 'jceb/vim-orgmode'

  " 自动完成
  "Plug 'davidhalter/jedi-vim'
  "Plug 'davidhalter/jedi'
  Plug 'neovim/python-client'
  " 快速注释
  Plug 'scrooloose/nerdcommenter'
  " 缩进指示线
  Plug 'Yggdroot/indentLine'
  " f 搜索增强
  " Plug 'justinmk/vim-sneak'
  " AngularJS support
  Plug 'burnettk/vim-angular'

  " 给选中的文本添加引号，或者修改
  Plug 'tpope/vim-surround'

  "Plug 'KangOl/vim-pudb'
  Plug 'rafi/awesome-vim-colorschemes'

  "OrgMode Date extension
  Plug 'tpope/vim-speeddating'

  "RestClient
  Plug 'aquach/vim-http-client'

  Plug 'vim-scripts/numbered.vim'

  "Plug 'lfv89/vim-interestingwords'

   "Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
  "Plug 'vim-vdebug/vdebug'
  "Plug 'jaredly/vim-debug'
  Plug 'sillybun/autoformatpythonstatement', {'do': './install.sh'}

endfunction

" Override the default settings as well as adding extras
function! UserConfig()

  " If you have installed the powerline fonts and want to enable airline layer
  " let g:airline_powerline_fonts=1

  " Use gui colors in terminal if available
  if has('termguicolors')
    set termguicolors
    "if g:spacevim_tmux
      "" If use vim inside tmux, see https://github.com/vim/vim/issues/993
      "" set Vim-specific sequences for RGB colors
      "let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      "let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    "endif
  endif

  let g:ale_emit_conflict_warnings = 0
  " :bd 删除当前 buffer
  " :1,5bw Wipe 1~5 buffer
  " :xd 删除末尾空格
  set encoding=utf-8
  set fileencoding=utf-8
  set autoread
  set nornu

  " 将所有数字都当做10进账进行处理
  set nrformats=
  " :YRShow 显示剪贴板的内容
  " :vs 纵向分割窗口
  " :split 横向分割窗口
  " 设置帮助语言为中文，需要下载中文的 help 文件
  set helplang=cn
  "colorscheme one
  "colorscheme default
  "colorscheme PaperColor
  let g:space_vim_dark_background = 233

  " Ctag Location
  "let g:airline_powerline_fonts=1
  let Tlist_Ctags_Cmd="/usr/local/Cellar/ctags/5.8_1/bin/ctags"
  " 设置允许使用鼠标
  set mouse=a
  " 设置80宽度颜色
  autocmd FileType python set colorcolumn=80
  "set colorcolumn=80
  "set columns=80
  " 设置背景色
  "hi ColorColumn ctermbg=Black guibg=Black
  " 背景色透明
  "if has('gui_running')
    "set background=dark
  "else
    "hi Normal ctermbg=NONE  guibg=NONE
  "endif
  "选取时将选区的内容字体置为绿色
  "hi Visual ctermfg=green guifg=green ctermbg=black guibg=black
  hi Visual ctermbg=black guibg=black
  " 高亮行，列
  set cursorline
  set cursorcolumn
  "设置当前行的样式
  highlight CursorLine   cterm=underline ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
  " highlight CursorColumn cterm=underline ctermbg=NONE ctermfg=green guibg=NONE guifg=NONE
  highlight LineNr ctermfg=grey guifg=grey
  "highlight IncSearch ctermfg=green guifg=green ctermbg=red guibg=red
  "highlight Search ctermfg=green guifg=green ctermbg=red guibg=red

  "缩进指示线"
  let g:indentLine_char='⎸'
  let g:indentLine_enabled = 1
  " 显示不可见字符
  set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
  set list
  " 在上下移动光标时，光标的上方或下方至少会保留显示的行数
  set scrolloff=3

  set expandtab
  set tabstop=4
  set shiftwidth=4
  "set textwidth=80
  set wrap
  set linebreak
  " Enable folding
  set foldmethod=syntax
  "set foldlevelstart=0
  " 代码折叠的层级
  set foldnestmax=9
  "set foldlevel=0
  " 使用系统剪贴板
  "set clipboard=unnamed

  " 搜索时忽略大小写
  set ignorecase
  " NERDTree 打开/关闭
  nnoremap <F4> :NERDTreeToggle<CR>
  nnoremap <Leader><F4> :NERDTreeMirror<CR> :NERDTreeFind<CR>
  " NERDTree 显示行号
  let g:NERDTreeShowLineNumbers=1
  " NERDTree 显示相对行号
  autocmd FileType nerdtree setlocal relativenumber
  " 设置 NerdTree 默认宽度
  let g:NERDTreeWinSize=40


  " 进入 Insert 模式自动保存
  autocmd InsertLeave *.* silent write

  " map    <Leader>n  :tabnext<CR>
  " Use Tab to switch buffer
  nnoremap <Leader><Tab> :Buffers<CR>
  nnoremap <Tab> :bn<CR>
  nnoremap <S-Tab> :bp<CR>

  " Make search results appear in the middle of the screen
  nnoremap n nzz
  nnoremap N Nzz
  nnoremap G Gzz
  nnoremap * *zz
  nnoremap # #zz
  nnoremap g* g*zz
  nnoremap g# g#zz

  " Format Python Script
  nmap <Leader>pf :0,$!yapf<CR>
  "let g:netrw_list_hide= '.*\.pyc$'
  "let g:NERDTreeIgnore = ['\.pyc$','\node_modules[[dir]]$']
  set wildignore+=**node_modules**,*.pyc,*.class
  let NERDTreeRespectWildIgnore=1
  "Ignore dist and build folders
  set wildignore+=*/dist*/**,*/target/**,*/build/**

  " Ignore libs
  set wildignore+=*/lib/**,*/_3rd_party_/**,*/node_modules/**,*/bower_components/**

  " Ignore images, pdfs, and font files
  set wildignore+=*.png,*.PNG,*.jpg,*.jpeg,*.JPG,*.JPEG,*.pdf
  set wildignore+=*.ttf,*.otf,*.woff,*.woff2,*.eot,*.jar

  " Ignore compiled files
  set wildignore+=*.class
  let g:basewildignore=&wildignore
  let g:NERDTreeIgnore=['dist*[[dir]]', '.jar[[file]]', 'node_modules[[dir]]',  'target[[dir]]', 'node[[dir]]', 'etc[[dir]]', '\.pyc$']

  "set wildignore=*.pyc
  autocmd FileType python nnoremap <buffer> <LocalLeader><LocalLeader>r :update<Bar>execute 'AsyncRun! python '.shellescape(@%, 1)<CR>
  autocmd FileType python nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! python3 '.shellescape(@%, 1)<CR>
  autocmd FileType go nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! go run '.shellescape(@%, 1)<CR>
  autocmd FileType javascript nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! node '.shellescape(@%, 1)<CR>
  autocmd FileType sh nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! '.shellescape(@%, 1)<CR>

  " autocmd FileType c,cpp,python,go,javascript,rust
  " \   nnoremap <LocalLeader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
  "tabs
  nmap <leader>tn :tabnew<cr>
  nmap <leader>tc :tabclose<cr>

  " 直接删除，不放到剪切板
  " nnoremap d "_d
  " vnoremap d "_d
  " vnoremap D "_D
  " vnoremap p "_dhp

  " FocusMode
  "nmap <F7> <Plug>FocusModeToggle
  "let g:focusmode_width = 72

  " disable arrow keys in normal mode
  noremap <Up> <Nop>
  noremap <Down> <Nop>
  noremap <Left> <Nop>
  noremap <Right> <Nop>

  "高亮行尾空格
  " highlight ExtraWhitespace ctermbg=red guibg=red
  " highlight ExtraWhitespace ctermbg=Yellow guibg=Yellow
  highlight ExtraWhitespace ctermbg=White guibg=White
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()

  " 设置 cshtml 文件默认按照 HTML 进行高亮
  au BufRead,BufNewFile *.cshtml set filetype=html
  au BufRead,BufNewFile *.html set filetype=htmldjango
  au BufRead,BufNewFile *.js set filetype=javascript
  au BufRead,BufNewFile *.http set filetype=javascript

  " fzf ag search
  " Search UserHome Folder
  nnoremap <Leader>f? :Files ~<CR>
  " Search current CWD
  nnoremap <Leader>ff :Files<CR>

  nnoremap <Leader>ag :execute 'Ag! ' . input('Ag/')<CR>
  " search current word with Ag
  nnoremap <Leader>ac :execute 'Ag!' expand('<cword>')<CR>

  " 多光标操作
  let g:multi_cursor_use_default_mapping=0
  let g:multi_cursor_next_key='<C-m>'
  let g:multi_cursor_prev_key='<C-p>'
  let g:multi_cursor_skip_key='<C-x>'
  let g:multi_cursor_quit_key='<Esc>'

  function TransTable()
    silent execute 's/\s\+/|/g'
    silent execute 's/^/|/g'
    silent execute 's/$/|/g'
    silent execute 'TableModeEnable'
  endfunction

  " TableMode Setting
  let g:table_mode_corner = '|'

  "保存当前布局
  nnoremap <Leader>ms :execute 'mksession! .last.vim'<CR>:execute 'wviminfo! .last.viminfo'<CR>
  "加载上次保存的布局
  nnoremap <Leader>ls :silent execute 'source .last.vim'<CR>:silent execute 'rviminfo .last.viminfo'<CR>


  " 翻译当前光标所在单词
  nmap <Leader>t :!echo --==<C-R><C-w>==-- ;ici <C-R><C-W><CR>

  let g:UltiSnipsExpandTrigger='<tab>'
  let g:UltiSnipsJumpForwardTrigger=""
  let g:UltiSnipsJumpBackwardTrigger='<c-p'

  let g:ycm_key_list_select_completion=[]
  let g:ycm_key_list_previous_completion=[]
  let g:SuperTabDefaultCompletionType = '<C-n>'

  "org mode
  let g:org_todo_keywords=['【TODO】', '【DOING】', '【DONE】' ]

  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)

  " Quickfix window to Right and 80 Width
  nmap <Leader>ll :cclose<CR>:vertical copen 70<CR>
  "nmap <\Space>ll :cclose<CR>:vertical copen 80<CR>

  " for python completions
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'jedi')
  " language specific completions on markdown file
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'mistune')

  " utils, optional
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'psutil')
  let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'setproctitle')

  "map f <Plug>Sneak_s
  "map F <Plug>Sneak_S
  " s{char}{char} to move to {char}{char}
  "nmap F <Plug>(easymotion-overwin-f2)
  "nmap f <Plug>(easymotion-overwin-f)


  autocmd BufWritePre *.markdown,*.md,*.text,*.txt,*.wiki,*.cnx,*.org call PanGuSpacing()

  " quick comment ss
  nmap <Leader>;; :call NERDComment(0,"toggle") <CR>

  " RestClient setting
  let g:http_client_jcountMemberStatusson_escape_utf=0
  "let g:http_client_preserve_responses=1
  "let g:http_client_json_ft = 'json'


  "let vim_markdown_preview_hotkey='<C-m>'
  let vim_markdown_preview_browser='Google Chrome'
  "let vim_markdown_preview_github=1
  let g:http_client_json_escape_utf=0
  "noremap <F2> :LeaderfFunction!<cr>
  "colorscheme gruvbox
  colorscheme one
  "colorscheme solarized8_high
  "colorscheme gruvbox
  tnoremap <Esc> <C-\><C-n>

  " function to delete duplicate lines
  " 1,$!uniq
  function! DelDuplicatedLines()
      while getline(".") == getline(line(".") - 1)
          exec 'norm! ddk'
      endwhile
      while getline(".") == getline(line(".") + 1)
          exec 'norm! dd'
      endwhile
  endfunction
  nnoremap <Leader>d :g/./call DelDuplicatedLines()<CR>

endfunction
