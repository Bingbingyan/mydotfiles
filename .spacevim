" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
 "let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
 "let g:spacevim_localleader = ','

" Enable the existing layers in space-vim
let g:spacevim_layers = [
      \ 'fzf', 'unite', 'better-defaults',
      \ 'which-key',
      \ 'emoji',
      \ 'better-motion','editing','formatting',
      \ 'html',
      \ 'python','auto-completion','deoplete',
      \ 'vue',
      \ 'javascript',
      \ 'java',
      \ 'markdown',
      \ 'chinese',
      \ 'text-align',
      \ 'programming',
      \ 'syntax-checking',
      \ 'git',
      \ 'code-snippets','c-c++'
      \ ]
      " \ 'goyo','go',

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim_gui
"   Layer 'airline'
" endif

" Manage your own plugins, refer to vim-plug's instruction for more detials.
function! UserInit()
  " Add plugin via Plug command.
  " Plug 'junegunn/seoul256.vim'
  Plug 'hotoo/pangu.vim'
  " JSON 格式，Filter
  Plug 'Bingbingyan/vim-jq'
  " 预览查询结果
  Plug 'osyo-manga/vim-over'

  " VIM Table Mode
  Plug 'dhruvasagar/vim-table-mode'

  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
  " Plug 'ryanoasis/vim-devicons'

  " 从 Insert Mode 切换到 Normal Mode 时 自动将输入法切换为英文
  " 需要将英文输入法设置为：US 而不是：ABC
  Plug 'ybian/smartim'

  " 可视化剪贴板
  " Plug 'vim-scripts/YankRing.vim'
  " 文字对齐
  " Plug 'godlygeek/tabular'

  Plug 'honza/vim-snippets'

  " Tagbar for Markdown
  " Plug 'majutsushi/tagbar'
  Plug 'lvht/tagbar-markdown'
  Plug 'iamcco/mathjax-support-for-mkdp'
  Plug 'iamcco/markdown-preview.vim'
  Plug 'corriander/vim-markdown-indent'
  " VIM 中文文档
  " Plug 'vimcn/vimcdoc'
  " 自动括号
  Plug 'Raimondi/delimitMate'
  Plug 'alvan/vim-closetag'

  Plug 'elzr/vim-json'

  " Vim Org Mode
  Plug 'jceb/vim-orgmode'

  " 自动完成
  " Plug 'neovim/python-client'
  " 快速注释
  Plug 'scrooloose/nerdcommenter'
  " 缩进指示线
  Plug 'Yggdroot/indentLine'
  " f 搜索增强
  " AngularJS support
  Plug 'burnettk/vim-angular'


  Plug 'rafi/awesome-vim-colorschemes'

  "OrgMode Date extension
  Plug 'tpope/vim-speeddating'

  "RestClient
  Plug 'aquach/vim-http-client'

  Plug 'vim-scripts/numbered.vim'
  " Plug 'tell-k/vim-autopep8'

  Plug 'ianva/vim-youdao-translater'

  " Plug 'liuchengxu/vista.vim'
  Plug 'roxma/vim-hug-neovim-rpc'

  Plug 'ncm2/float-preview.nvim'
  Plug 'rhysd/git-messenger.vim'

  Plug 'quafzi/vim-flow-diagram'
  Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '~/.vim/plugged/gocode/nvim/symlink.sh' }

  Plug 'lilydjwg/colorizer'


endfunction

" Override the default settings as well as adding extras
function! UserConfig()

  " ncm2 settings
  " enable ncm2 for all buffers
  autocmd BufEnter * call ncm2#enable_for_buffer()
  let g:deoplete#enable_yarp = 1

  " IMPORTANTE: :help Ncm2PopupOpen for more information
  set completeopt=noinsert,menuone,noselect

  " If you have installed the powerline fonts and want to enable airline layer
  let g:airline_powerline_fonts=1

  " Use gui colors in terminal if available
  if has('termguicolors')
    set termguicolors
    "if g:spacevim_tmux
      "" If use vim inside tmux, see https://github.com/vim/vim/issues/993
      "" set Vim-specific sequences for RGB colors
      "let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      "let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    "endif
  endif

  set encoding=utf-8
  set fileencoding=utf-8
  set autoread
  set nornu

  " 将所有数字都当做10进制进行处理
  set nrformats=
  " :YRShow 显示剪贴板的内容
  " 设置帮助语言为中文，需要下载中文的 help 文件
  set helplang=cn

  " colorscheme space-vim-dark
  " colorscheme onedark
  " colorscheme default
  " colorscheme PaperColor
  " colorscheme solarized8
  " set background=light
  " let g:space_vim_dark_background = 233

  " Ctag Location
  let Tlist_Ctags_Cmd="/usr/local/Cellar/ctags/5.8_1/bin/ctags"
  " 设置允许使用鼠标
  set mouse=a
  " 设置80宽度颜色
  autocmd FileType python set colorcolumn=80
  "set colorcolumn=80
  "set columns=80
  " 设置背景色
  "hi ColorColumn ctermbg=Black guibg=Black
  " 背景色透明
  "if has('gui_running')
    "set background=dark
  "else
    "hi Normal ctermbg=NONE  guibg=NONE
  "endif
  "选取时将选区的内容字体置为绿色
  "hi Visual ctermfg=green guifg=green ctermbg=black guibg=black
  "hi Visual ctermbg=black guibg=black
  " 高亮行，列
  "set cursorline
  "set cursorcolumn
  "设置当前行的样式
  "highlight CursorLine   cterm=underline ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
  " highlight CursorColumn cterm=underline ctermbg=NONE ctermfg=green guibg=NONE guifg=NONE
  "highlight LineNr ctermfg=grey guifg=grey
  "highlight IncSearch ctermfg=green guifg=green ctermbg=red guibg=red
  "highlight Search ctermfg=green guifg=green ctermbg=red guibg=red

  "缩进指示线"
  " let g:indentLine_char='⎸'
  let g:indentLine_enabled = 1
  " 竖向分屏分割线颜色、字符
  set fillchars=vert:\│
  hi VertSplit guifg=#e18254
  " 显示不可见字符
  set list
  set listchars=tab:>-,trail:~,extends:>,precedes:<
  " set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
  " 在上下移动光标时，光标的上方或下方至少会保留显示的行数
  set scrolloff=3

  set expandtab
  set tabstop=4
  set shiftwidth=4
  "set textwidth=80
  set wrap
  "set linebreak
  " set showbreak=>
  " Enable folding
  set foldmethod=syntax
  "set foldlevelstart=0
  " 代码折叠的层级
  set foldnestmax=9
  "set foldlevel=0
  " 使用系统剪贴板
  "set clipboard=unnamed

  " 搜索时忽略大小写
  set ignorecase
  " NERDTree 打开/关闭
  nnoremap <F4> :NERDTreeToggle<CR>
  nnoremap <Leader><F4> :NERDTreeMirror<CR> :NERDTreeFind<CR>
  " NERDTree 显示行号
  let g:NERDTreeShowLineNumbers=1
  " NERDTree 显示相对行号
  autocmd FileType nerdtree setlocal relativenumber
  " 设置 NerdTree 默认宽度
  let g:NERDTreeWinSize=40


  " 进入 Insert 模式自动保存
  " autocmd InsertLeave *.* silent write

  " Make search results appear in the middle of the screen
  nnoremap n nzz
  nnoremap N Nzz
  nnoremap G Gzz
  nnoremap * *zz
  nnoremap # #zz
  nnoremap g* g*zz
  nnoremap g# g#zz

  " Format Python Script
  nmap <Leader>pf :0,$!yapf<CR>
  set wildignore+=**node_modules**,*.pyc,*.class
  let NERDTreeRespectWildIgnore=1
  "Ignore dist and build folders
  set wildignore+=*/dist*/**,*/target/**,*/build/**

  " Ignore libs
  set wildignore+=*/lib/**,*/_3rd_party_/**,*/node_modules/**,*/bower_components/**

  " Ignore images, pdfs, and font files
  set wildignore+=*.png,*.PNG,*.jpg,*.jpeg,*.JPG,*.JPEG,*.pdf
  set wildignore+=*.ttf,*.otf,*.woff,*.woff2,*.eot,*.jar,*.doc,*.docx,*.xls,*.xlsx

  " Ignore compiled files
  set wildignore+=*.class
  let g:basewildignore=&wildignore
  " let g:NERDTreeIgnore=['dist*[[dir]]', '.jar[[file]]', 'node_modules[[dir]]',  'target[[dir]]', 'node[[dir]]', '__pycache__[[dir]]','etc[[dir]]', '\.pyc$']
  let g:NERDTreeIgnore=['.jar[[file]]', 'node_modules[[dir]]',  'target[[dir]]', 'node[[dir]]', '__pycache__[[dir]]','etc[[dir]]', '\.pyc$']

  autocmd FileType python nnoremap <buffer> <LocalLeader><LocalLeader>r :update<Bar>execute 'AsyncRun! python '.shellescape(@%, 1)<CR>
  autocmd FileType python nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! python3 '.shellescape(@%, 1)<CR>
  autocmd FileType go nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! go run '.shellescape(@%, 1)<CR>
  autocmd FileType javascript nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! node '.shellescape(@%, 1)<CR>
  autocmd FileType sh nnoremap <buffer> <LocalLeader>r :update<Bar>execute 'AsyncRun! '.shellescape(@%, 1)<CR>
  filetype indent on
  filetype plugin indent on
  autocmd FileType java nnoremap  <LocalLeader>r :call CompileRunGcc()<CR>

  func! CompileRunGcc()
    exec "w"
    if &filetype == 'java'
    exec "!javac %"
    exec "!time java -cp %:p:h %:t:r"
    endif
  endfunc

  "tabs
  nmap <leader>tn :tabnew<cr>
  " nmap <leader>tc :tabclose<cr>

  " disable arrow keys in normal mode
  noremap <Up> <Nop>
  noremap <Down> <Nop>
  noremap <Left> <Nop>
  noremap <Right> <Nop>

  "高亮行尾空格
  highlight ExtraWhitespace ctermbg=White guibg=White
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()

  " 设置 cshtml 文件默认按照 HTML 进行高亮
  au BufRead,BufNewFile *.cshtml set filetype=html
  au BufRead,BufNewFile *.html set filetype=htmldjango
  au BufRead,BufNewFile *.js set filetype=javascript
  au BufRead,BufNewFile *.http set filetype=javascript
  au BufRead,BufNewFile *.rust set filetype=rust

  " fzf ag search
  " Search UserHome Folder
  nnoremap <Leader>f? :Files ~<CR>
  " Search current CWD
  nnoremap <Leader>ff :Files<CR>
  nnoremap <Leader>fc :call fzf#vim#files('.', {'options':'--query '.expand('<cword>')})<CR>

  nnoremap <Leader>ag :execute 'Ag! ' . input('Ag/')<CR>
  " search current word with Ag
  nnoremap <Leader>ac :execute 'Ag!' expand('<cword>')<CR>

  function TransTable()
    silent execute 's/\s\+/|/g'
    silent execute 's/^/|/g'
    silent execute 's/$/|/g'
    silent execute 'TableModeEnable'
  endfunction

  function FormatWS()
    silent execute 's/^.\{-}\\.\\.//g'
    silent execute 's/\\u.*//g'
    silent execute 's/\\//g'
    silent execute 'call FormatJSON()'
  endfunction

  " TableMode Setting
  let g:table_mode_corner = '|'

  "保存当前布局
  nnoremap <Leader>ms :execute 'tabdo NERDTreeClose'<CR>execute 'mksession! .last.vim'<CR>:execute 'wviminfo! .last.viminfo'<CR>
  "加载上次保存的布局
  nnoremap <Leader>ls :silent execute 'source .last.vim'<CR>:silent execute 'rviminfo .last.viminfo'<CR>execute 'tabdo NERDTreeClose'<CR>


  " 翻译当前光标所在单词
  " nmap <Leader>t :!echo --==<C-R><C-w>==-- ;ici <C-R><C-W><CR>
  " nmap <Leader>t :!echo --==<C-R><C-w>==-- ;yd <C-R><C-W><CR>
  vnoremap <silent> <C-T> :<C-u>Ydv<CR>
  nnoremap <silent> <C-T> :<C-u>Ydc<CR>
  noremap <leader>yd :<C-u>Yde<CR>


  "org mode
  " let g:loaded_org_syntax = 1
  let g:org_todo_keywords=['【TODO】', '【DOING】', '【DONE】' ]

  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)

  " Quickfix window to Right and 80 Width
  nmap <Leader>ll :cclose<CR>::botright vertical copen 70<CR>
  "nmap <Leader>ll :cclose<CR>:vertical copen 70<CR>


  autocmd BufWritePre *.markdown,*.md,*.text,*.txt,*.wiki,*.cnx,*.org call PanGuSpacing()

  " quick comment ss
  nmap <Leader>;; :call NERDComment(0,"toggle") <CR>
  let g:NERDCommentEmptyLines = 1
  let g:NERDTrimTrailingWhitespace = 1
  let g:NERDCompactSexyComs = 1
  " let g:NERDCustomDelimiters = {
                        " \ 'javascript': { 'left': '//', 'leftAlt': '/**', 'rightAlt': '*/' },
                        " \ 'less': { 'left': '/**', 'right': '*/' }
                        " \ }
                          " \ 'python': { 'left': '"""', 'right': '"""' }


  " RestClient setting
  let g:http_client_jcountMemberStatusson_escape_utf=0
  "let g:http_client_preserve_responses=1
  "let g:http_client_json_ft = 'json'

  let g:http_client_json_escape_utf=0

  "colorscheme gruvbox
  "colorscheme onedark
  "colorscheme solarized8_high
  " colorscheme gruvbox


  " function to delete duplicate lines
  " 1,$!uniq
  function! DelDuplicatedLines()
      while getline(".") == getline(line(".") - 1)
          exec 'norm! ddk'
      endwhile
      while getline(".") == getline(line(".") + 1)
          exec 'norm! dd'
      endwhile
  endfunction
  "nnoremap <Leader>d :g/./call DelDuplicatedLines()<CR>

  let g:qs_highlight_on_keys = ['t', 'T']
  let g:_emit_conflict_warnings = 1


  " ALE config
  let g:ale_fixers = {'python': ['autopep8']}
  let g:ale_python_autopep8_options = '--aggressive'

  "始终开启标志列
  let g:ale_sign_column_always = 1
  let g:ale_set_highlights = 1
  "自定义error和warning图标 需要安装字体
  " let g:ale_sign_error = '✗'
  " let g:ale_sign_warning = '⚡'
  "在vim自带的状态栏中整合ale
  let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '•'
  let g:ale_echo_msg_format = '[%linter%][%code%]: %s [%severity%]'
  let g:ale_enabled = 1
  let g:ale_lint_on_save = 1

  " incream vim speed
  set re=1
  set ttyfast
  set lazyredraw

  let g:snips_author ="Bing.B.Yan"
  let g:snips_email = "Bing.B.Yan@yzw.cn"

endfunction
